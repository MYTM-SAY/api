generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int                   @id @default(autoincrement())
  fullname            String
  username            String                @unique
  email               String                @unique
  dob                 DateTime
  lastLogin           DateTime?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  hashedPassword      String
  Comment             Comment[]
  CommentVote         CommentVote[]
  OwnedCommunities    Community[]           @relation("CommunityOwner")
  InstructorProfile   InstructorProfile[]
  CommunityMembers    CommunityMembers[]
  Post                Post[]
  PostVote            PostVote[]
  UserProfile         UserProfile?
  JoinRequests        JoinRequest[]
  CompletedLessons    CompletedLessons[]
  UserContributions   UserContributions[]
  favoriteCommunities favoriteCommunities[]
  QuizAttempted       QuizAttempted[]
  UserAnswers         UserAnswer[]
}

model UserProfile {
  id                Int     @id @default(autoincrement())
  userId            Int     @unique
  bio               String?
  twitter           String?
  facebook          String?
  instagram         String?
  linkedin          String?
  youtube           String?
  profilePictureURL String?
  User              User    @relation(fields: [userId], references: [id])
  Tags              Tag[]   @relation("TagToUserProfile")
}

model InstructorProfile {
  id           Int      @id @default(autoincrement())
  userId       Int?
  education    String?
  experience   String?
  certificates String[]
  User         User?    @relation(fields: [userId], references: [id])
}

model Tag {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Communities  Community[]   @relation("CommunityToTag")
  UserProfiles UserProfile[] @relation("TagToUserProfile")
}

model Community {
  id                  Int                   @id @default(autoincrement())
  name                String
  description         String?
  bio                 String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  coverImgURL         String?
  logoImgURL          String?
  ownerId             Int
  isPublic            Boolean               @default(true)
  Classrooms          Classroom[]
  Owner               User                  @relation("CommunityOwner", fields: [ownerId], references: [id])
  Forums              Forum[]
  CommunityMembers    CommunityMembers[]
  Tags                Tag[]                 @relation("CommunityToTag")
  JoinRequests        JoinRequest[] // Removed incorrect `map` argument
  favoriteCommunities favoriteCommunities[]
}

model JoinRequest {
  id          Int               @id @default(autoincrement())
  userId      Int
  communityId Int
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  status      JoinRequestStatus @default(PENDING)
  Community   Community         @relation(fields: [communityId], references: [id])
  User        User              @relation(fields: [userId], references: [id])

  @@unique([userId, communityId])
}

model CommunityMembers {
  communityId Int
  userId      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Role        Role
  Community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  User        User      @relation(fields: [userId], references: [id])

  @@id([communityId, userId])
  @@map("CommunityMembers")
}

model favoriteCommunities {
  userId      Int
  communityId Int
  createdAt   DateTime @default(now())

  User      User      @relation(fields: [userId], references: [id])
  Community Community @relation(fields: [communityId], references: [id])

  @@id([userId, communityId])
}

model Material {
  id           Int          @id @default(autoincrement())
  materialType MaterialType
  fileUrl      String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  lessonId     Int
  Lesson       Lesson       @relation("LessonMaterials", fields: [lessonId], references: [id], onDelete: Cascade)
}

model Forum {
  id          Int       @id @default(autoincrement())
  title       String?
  description String?
  communityId Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  Posts       Post[]
}

model Post {
  id          Int        @id @default(autoincrement())
  title       String
  content     String?
  attachments String[]
  forumId     Int
  authorId    Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Comments    Comment[]
  Author      User       @relation(fields: [authorId], references: [id])
  Forum       Forum      @relation(fields: [forumId], references: [id], onDelete: NoAction)
  PostVotes   PostVote[]
}

model Comment {
  id           Int           @id @default(autoincrement())
  content      String?
  parentId     Int?
  postId       Int
  authorId     Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Author       User          @relation(fields: [authorId], references: [id])
  Parent       Comment?      @relation("CommentReplies", fields: [parentId], references: [id])
  Children     Comment[]     @relation("CommentReplies")
  Post         Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  CommentVotes CommentVote[]
}

model PostVote {
  userId Int
  postId Int
  type   VoteType @default(NONE)
  Post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  User   User     @relation(fields: [userId], references: [id])

  @@id([userId, postId])
}

model CommentVote {
  userId    Int
  commentId Int
  type      VoteType @default(NONE)
  Comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id])

  @@id([userId, commentId])
}

model Classroom {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  coverImg    String?
  communityId Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Community   Community  @relation(fields: [communityId], references: [id])
  Quiz        Quiz[]
  Sections    Section[]
  Questions   Question[]
}

model Section {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  classroomId Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Lessons     Lesson[]
  Classroom   Classroom @relation(fields: [classroomId], references: [id], onDelete: Cascade)
}

model Lesson {
  id               Int                @id @default(autoincrement())
  name             String
  notes            String[]
  sectionId        Int
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  CompletedLessons CompletedLessons[]
  Section          Section            @relation(fields: [sectionId], references: [id])
  Materials        Material[]         @relation("LessonMaterials")
}

model CompletedLessons {
  userId   Int
  lessonId Int
  Lesson   Lesson @relation(fields: [lessonId], references: [id])
  User     User   @relation(fields: [userId], references: [id])

  @@unique([userId, lessonId])
}

model Question {
  id          Int      @id @default(autoincrement())
  classroomId Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  questionHeader String?
  options        String[] // still supports T/F or any custom options
  answer         String[] // array supports 1 or more answers
  type           QuestionType // now includes TRUE_FALSE
  QuizQuestions  QuizQuestion[]
  Classroom      Classroom?     @relation(fields: [classroomId], references: [id])
}

model Quiz {
  id            Int             @id @default(autoincrement())
  name          String
  duration      Int // in minutes
  startDate     DateTime
  endDate       DateTime
  classroomId   Int
  active        Boolean
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Classroom     Classroom?      @relation(fields: [classroomId], references: [id])
  QuizQuestions QuizQuestion[]
  QuizAttempted QuizAttempted[]
}

model QuizQuestion {
  id          Int          @id @default(autoincrement())
  quizId      Int
  questionId  Int
  points      Int
  Quiz        Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  Question    Question     @relation(fields: [questionId], references: [id])
  UserAnswers UserAnswer[]
}

model UserAnswer {
  id             Int          @id @default(autoincrement())
  quizQuestionId Int
  userId         Int
  choosedAnswer  String
  isCorrect      IsCorrect?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  QuizQuestion   QuizQuestion @relation(fields: [quizQuestionId], references: [id])
  User           User         @relation(fields: [userId], references: [id])
}

model QuizAttempted {
  id        Int        @id @default(autoincrement())
  userId    Int
  quizId    Int
  startDate DateTime
  endDate   DateTime
  status    QuizStatus
  score     Int
  User      User       @relation(fields: [userId], references: [id])
  Quiz      Quiz       @relation(fields: [quizId], references: [id])
}

model UserContributions {
  id       Int      @id @default(autoincrement())
  userId   Int
  count    Int      @default(0)
  dateOnly DateTime @db.Date
  User     User     @relation(fields: [userId], references: [id])

  @@unique([userId, dateOnly])
}

model File {
  id        Int      @id @default(autoincrement())
  name      String
  url       String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum QuestionType {
  SINGLE
  MULTI
  TRUE_FALSE
}

enum IsCorrect {
  true
  false
  nothing
}

enum QuizStatus {
  InProgress
  Completed
  TimedOut
}

enum MaterialType {
  VIDEO
  AUDIO
  IMG
  DOC
  FILE
}

enum Role {
  OWNER
  MODERATOR
  MEMBER
}

enum JoinRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum VoteType {
  DOWNVOTE
  UPVOTE
  NONE
}
