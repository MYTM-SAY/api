generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                 @id @default(autoincrement())
  fullname          String?
  username          String              @unique
  email             String              @unique
  dob               DateTime?
  lastLogin         DateTime?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  hashedPassword    String
  Comment           Comment[]
  CommentVote       CommentVote[]
  OwnedCommunities  Community[]         @relation("CommunityOwner")
  InstructorProfile InstructorProfile[]
  MemberRoles       MemberRoles[]
  Post              Post[]
  PostVote          PostVote[]
  QuizScore         QuizScore[]
  UserProfile       UserProfile?
  Communities       Community[]         @relation("CommunityMembers")

  Progress         Progress[]
  CompletedLessons CompletedLessons[]
}

model UserProfile {
  id                Int     @id @default(autoincrement())
  userId            Int     @unique
  bio               String?
  twitter           String?
  facebook          String?
  instagram         String?
  linkedin          String?
  youtube           String?
  profilePictureURL String?
  User              User    @relation(fields: [userId], references: [id])
  Tags              Tag[]   @relation("TagToUserProfile")
}

model InstructorProfile {
  id           Int      @id @default(autoincrement())
  userId       Int?
  education    String?
  experience   String?
  certificates String[]
  User         User?    @relation(fields: [userId], references: [id])
}

model Tag {
  id              Int           @id @default(autoincrement())
  name            String        @unique
  isCommunityOnly Boolean
  communityId     Int?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  Communities     Community[]   @relation("CommunityToTag")
  UserProfiles    UserProfile[] @relation("TagToUserProfile")
}

model Community {
  id               Int                @id @default(autoincrement())
  name             String
  description      String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  coverImgURL      String?
  logoImgURL       String?
  ownerId          Int
  Classrooms       Classroom[]
  Owner            User               @relation("CommunityOwner", fields: [ownerId], references: [id])
  Forums           Forum[]
  MemberRoles      MemberRoles[]
  Members          User[]             @relation("CommunityMembers")
  Tags             Tag[]              @relation("CommunityToTag")
  CompletedLessons CompletedLessons[]
}

model MemberRoles {
  communityId Int
  userId      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Role        Role
  Community   Community @relation(fields: [communityId], references: [id])
  User        User      @relation(fields: [userId], references: [id])

  @@id([communityId, userId])
}

model Material {
  id           Int          @id @default(autoincrement())
  materialType MaterialType
  fileUrl      String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  Lessons      Lesson[]
}

model Forum {
  id          Int       @id @default(autoincrement())
  title       String?
  description String?
  communityId Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  Community   Community @relation(fields: [communityId], references: [id])
  Posts       Post[]
}

model Post {
  id          Int        @id @default(autoincrement())
  title       String
  content     String?
  voteCounter Int        @default(0)
  attchments  String[]
  forumId     Int
  authorId    Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  Comments    Comment[]
  Author      User       @relation(fields: [authorId], references: [id])
  Forum       Forum      @relation(fields: [forumId], references: [id])
  PostVotes   PostVote[]
}

model Comment {
  id           Int           @id @default(autoincrement())
  content      String?
  voteCounter  Int           @default(0)
  parentId     Int?
  postId       Int
  authorId     Int
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Author       User          @relation(fields: [authorId], references: [id])
  Parent       Comment?      @relation("CommentReplies", fields: [parentId], references: [id])
  Children     Comment[]     @relation("CommentReplies")
  Post         Post          @relation(fields: [postId], references: [id])
  CommentVotes CommentVote[]
}

model PostVote {
  count  Int
  userId Int
  postId Int
  Post   Post @relation(fields: [postId], references: [id])
  User   User @relation(fields: [userId], references: [id])

  @@id([userId, postId])
}

model CommentVote {
  count     Int
  userId    Int
  commentId Int
  Comment   Comment @relation(fields: [commentId], references: [id])
  User      User    @relation(fields: [userId], references: [id])

  @@id([userId, commentId])
}

model Classroom {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  coverImg    String?
  communityId Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  progress    Int       @default(0)
  Community   Community @relation(fields: [communityId], references: [id])
  Quiz        Quiz[]
  Sections    Section[]

  Progress         Progress[]
  CompletedLessons CompletedLessons[]
}

model Section {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  classroomId Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  isCompleted Boolean    @default(false)
  Lessons     Lesson[]
  Questions   Question[]
  Classroom   Classroom  @relation(fields: [classroomId], references: [id])
}

model Lesson {
  id         Int      @id @default(autoincrement())
  name       String
  notes      String?
  materialId Int
  sectionId  Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Material   Material @relation(fields: [materialId], references: [id])
  Section    Section  @relation(fields: [sectionId], references: [id])

  CompletedLessons CompletedLessons[]
}

model CompletedLessons {
  userId      Int
  lessonId    Int
  communityId Int
  classroomId Int

  Lesson    Lesson    @relation(fields: [lessonId], references: [id])
  User      User      @relation(fields: [userId], references: [id])
  Community Community @relation(fields: [communityId], references: [id])
  Classroom Classroom @relation(fields: [classroomId], references: [id])

  @@unique([userId, lessonId, communityId, classroomId])
}

model Progress {
  userId      Int
  classroomId Int
  progress    Int

  Classroom Classroom @relation(fields: [classroomId], references: [id])
  User      User      @relation(fields: [userId], references: [id])

  @@unique([userId, classroomId])
}

model Question {
  id        Int      @id @default(autoincrement())
  text      String?
  options   String[]
  answers   String[]
  sectionId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Section   Section  @relation(fields: [sectionId], references: [id])
  Quiz      Quiz[]   @relation("QuestionToQuiz")
}

model Quiz {
  id          Int         @id @default(autoincrement())
  name        String
  duration    Int
  active      Boolean
  classroomId Int
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  Classroom   Classroom   @relation(fields: [classroomId], references: [id])
  QuizScore   QuizScore[]
  questions   Question[]  @relation("QuestionToQuiz")
}

model QuizScore {
  id        Int      @id @default(autoincrement())
  userId    Int
  quizId    Int
  score     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Quiz      Quiz     @relation(fields: [quizId], references: [id])
  User      User     @relation(fields: [userId], references: [id])
}

model File {
  id        Int      @id @default(autoincrement())
  name      String
  url       String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MaterialType {
  VIDEO
  AUDIO
  IMG
  DOC
  FILE
}

enum Role {
  ADMIN
  OWNER
  MODERATOR
  MEMBER
}
